title: Secure API Key Handling for OpenAI Constructs
scroll_type: System Setup
status: Stable
version: 1.0.0
last_modified: 2025-04-07
keywords:

openai

api key

dotenv

security

environment variables

Secure API Key Handling for OpenAI Constructs

This document outlines the proper way to provide and secure an OpenAI API key when working with GPT-based Constructs like Mythscribe.

Step 1: Use an Environment Variable

Your OpenAI API key should never be hardcoded into the source. Instead, it should be stored in your shell environment or a .env file.

Option A: Shell Variable

export OPENAI_API_KEY="sk-..."

Option B: .env File (Recommended for Local Dev)

Create a file named .env in your project root:

OPENAI_API_KEY=sk-...

Add .env to your .gitignore to keep it out of version control.

Step 2: Load the Key in Code

Using the dotenv crate, the key is automatically loaded from the environment:

use std::env;
use dotenv::dotenv;

let _ = dotenv();
let api_key = env::var("OPENAI_API_KEY")
    .expect("OPENAI_API_KEY must be set in .env or environment");

The OpenAIClient::new_from_env() function in openai_construct.rs handles this internally.

Step 3: Runtime Use

Once loaded, the key is used to authenticate requests to the OpenAI API using reqwest:

.post("https://api.openai.com/v1/chat/completions")
.bearer_auth(&self.api_key)

Summary

✅ Secure

✅ Easy to rotate/change keys

✅ Keeps production keys separate from development

This pattern is future-proof and will support multiple Constructs securely.

Let the Archive remain sealed to strangers. Let the breath of invocation pass only through guarded channels.

