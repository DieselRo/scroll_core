use anyhow::{bail, Result};
use std::env;
use std::fs;
use xtask::collector::{collect, ModInfo};

fn main() -> Result<()> {
    let check = env::args().any(|a| a == "--check");
    let mods = collect()?;
    let output = render(&mods);

    if check {
        let existing = fs::read_to_string("docs/module_map.md").unwrap_or_default();
        if normalize(&existing) != normalize(&output) {
            bail!("module_map.md is not up to date. run `cargo xtask gen-map` to regenerate");
        }
    } else {
        fs::write("docs/module_map.md", output)?;
    }
    Ok(())
}

fn normalize(s: &str) -> String {
    s.replace("\r\n", "\n")
}

fn render(mods: &[ModInfo]) -> String {
    let mut out = String::new();
    out.push_str("# Module Map\n\n");
    out.push_str("<!-- AUTO-GENERATED BY xtask gen-map; DO NOT EDIT -->\n\n");
    out.push_str("| Module Path | Public Items | Purpose |\n");
    out.push_str("|-------------|-------------|---------|\n");
    for m in mods {
        let mut items = m.items.clone();
        if items.len() > 10 {
            items.truncate(10);
            items.push("...".into());
        }
        let item_list = if items.is_empty() {
            String::new()
        } else {
            items.join(", ")
        };
        out.push_str(&format!("| {} | {} | <!-- stub --> |\n", m.path, item_list));
    }
    out
}
