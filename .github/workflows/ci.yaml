name: CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  ci:
    if: |
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !(github.event_name == 'pull_request' && (contains(github.event.pull_request.title, '[ci skip]') || contains(github.event.pull_request.body, '[ci skip]')))
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
      - name: Determine Rust version
        id: rust-version
        run: echo "version=$(rustc --version)" >> "$GITHUB_OUTPUT"
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-
      - name: Cache target dir
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-target-
      - name: cargo fmt
        run: cargo fmt -- --check
      - name: cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      - name: Install cargo-udeps
        run: cargo +nightly install cargo-udeps --locked
      - name: cargo udeps
        run: cargo +nightly udeps --workspace --all-targets
      - name: Install cargo-deny
        run: cargo install cargo-deny --locked
      - name: cargo deny
        run: cargo deny check
      - name: Generate module map
        run: |
          git config --global core.autocrlf false
          cargo xtask gen-map --check
      - name: cargo test
        run: cargo test --workspace -- --nocapture
      - name: cargo build release
        run: cargo build --workspace --release
